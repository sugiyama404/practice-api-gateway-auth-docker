events {
    worker_connections 512;
}

http {

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://api:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 保護されたエンドポイント - 認証が必要
        location /protected {
            # 認証サービスにリクエストを転送して認証チェック
            auth_request /auth;

            # 認証成功時のリクエスト処理
            proxy_pass http://api:8000/protected;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # オーソライザーから渡された情報を環境変数として設定
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_principal_id $upstream_http_x_principal_id;

            # 認証情報をAPIに転送
            proxy_set_header X-Principal-ID $auth_principal_id;
        }

        # 認証リクエスト処理用の内部エンドポイント
        location = /auth {
            internal;
            proxy_pass http://authorizer:8000/authorize;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;

            # Authorization ヘッダーを転送
            proxy_set_header Authorization $http_authorization;
        }

        # エラーハンドリング
        error_page 401 = @error401;

        location @error401 {
            return 401 ' {
                #$#%#$#placeholder03434#$#%#$#:#$#%#$#placeholder13434#$#%#$
            }
            ';
            add_header Content-Type application/json;
        }
